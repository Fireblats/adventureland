(()=>{"use strict";var __webpack_exports__={};async function print(message){safe_log(message)}function get_item_quantity(item_name){if(item_name===null||item_name===undefined)return 0;let quantity=0;for(let i=0;i<character.items.length;i++){if(character.items[i]==null){break}if(character.items[i]!==undefined&&character.items[i].name===item_name){quantity+=character.items[i].q??0}}return quantity}function item_exists(item_name){for(let i=0;i<character.items.length;i++){if(character.items[i]==null){break}if(character.items[i].name===item_name){return true}}return false}async function customHPandMP(){if(character.hp<character.max_hp-200){use_skill("use_hp")}if(character.mp<character.max_mp-300){use_skill("use_mp")}}function Test_Func(){print("Test_Func")}const t1MageItems=[G.items.staff,G.items.helmet,G.items.shoes,G.items.gloves,G.items.coat];const delay=ms=>new Promise((res=>setTimeout(res,ms)));const customMonsters={Bee:{name:"Bee",x:496.78379392236116,y:1028.891401478082},Crab:{name:"Crab",x:-1181.7290115323442,y:-70.48519999365637}};const customCharacters={Lucas:{x:-460.9737110795928,y:-77.41004909360228},Gabriel:{x:-89.26400993247745,y:-143.6246820060477},Cue:{x:-207.37506379157145,y:-184.9999999,id:"newupgrade"},Ernis:{x:-39.864347750250225,y:-147.7134982894214}};const defaultSettings={attack_mode:true,upgrading:false,currentMonster:customMonsters.Crab,minimumGoldToStopUpgrading:15e3,goldToStartUpgrading:15e4,upgrade_mode:false,currentUpgradeItem:G.items.staff,buyingPotions:false,maxHealthPotions:200,maxManaPotions:200,healthPotionName:"hpot0",manaPotionName:"mpot0",upgradeItem:G.items.staff,allItemsUpgraded:false,minimumScrollsToUpgrade:28};const defaultSettingsProxy=new Proxy(defaultSettings,{get:(o,property)=>{const propertyFromStorage=localStorage.getItem(property.toString());return propertyFromStorage!==null?JSON.parse(propertyFromStorage):null},set:(o,property,value)=>{localStorage.setItem(property.toString(),JSON.stringify(value));return true}});function sleep(ms){return new Promise((resolve=>setTimeout(resolve,ms)))}function createLocalStorage(){for(const[key,value]of Object.entries(defaultSettings)){if(!localStorage.getItem(key)){localStorage.setItem(key,JSON.stringify(value))}}}async function teleportToTown(){safe_log("Waiting 5 seconds for teleport...");await use_skill("use_town").then((async()=>{safe_log("Teleported to town")}),(async()=>{safe_log("Failed to teleport to town")}));await delay(5e3)}async function checkHealthPotions(){if(quantity("hpot0")<10||quantity("mpot0")<10){const hpot0Price=G.items.hpot0.g;const mpot0Price=G.items.mpot0.g;const currentHealthPotions=quantity("hpot0");const currentManaPotions=quantity("mpot0");const{maxHealthPotions}=defaultSettingsProxy;const{maxManaPotions}=defaultSettingsProxy;const{gold}=character;const goldNeeded=(maxHealthPotions-currentHealthPotions)*hpot0Price+(maxManaPotions-currentManaPotions)*mpot0Price;if(gold>=goldNeeded){defaultSettingsProxy.buyingPotions=true}}else{defaultSettingsProxy.buyingPotions=false}if(defaultSettingsProxy.buyingPotions){teleportToTown();safe_log("Buying potions...");if(!smart.moving){smart_move({x:customCharacters.Ernis.x,y:customCharacters.Ernis.y})}await delay(1e3);while(smart.moving){await delay(1e3)}buy("hpot0",defaultSettingsProxy.maxHealthPotions-quantity("hpot0"));buy("mpot0",defaultSettingsProxy.maxManaPotions-quantity("mpot0"))}}async function battleMonsters(monster){monster=JSON.parse(monster);if(character.real_x!==monster.x||character.real_y!==monster.y){if(!smart.moving){smart_move({x:monster.x,y:monster.y});await sleep(4e3);safe_log("Done sleeping")}else{safe_log("Waiting for smart move to finish")}}else{let target=get_targeted_monster();if(!target){target=get_nearest_monster({min_xp:100,max_att:120});if(target?.skin!==monster.skin){target=null}if(target){change_target(target)}else{set_message("No Monsters");return}}if(!is_in_range(target)){move(character.x+(target.x-character.x)/2,character.y+(target.y-character.y)/2)}else if(can_attack(target)){set_message("Attacking");attack(target)}}}async function chooseUpgradeItem(){for(const[,value]of Object.entries(t1MageItems)){const itemName=value.id;const searchItem=character.items.filter((item=>item!==null&&item!==undefined&&item.name===itemName&&item.level!==undefined&&item.level>=7));if(searchItem.length>0){safe_log(`Found Found T${searchItem[0].level} ${itemName} in bag`);continue}for(const[key1,value1]of Object.entries(character.slots)){if(value1!==null&&value1!==undefined&&value1.name===itemName&&value1.level!==undefined&&value1.level>=7){safe_log(`Found T${value1.level} ${itemName} in slot key1: ${key1}, value1.name: ${value1.name}`);if(key1==="shoes"&&value1.level>=7)return false;continue}}safe_log(`Couldn't find [T7+ ${itemName}], choosing for upgrading`);if(value!==undefined)defaultSettingsProxy.upgradeItem=value;return true}}async function needScrolls(){const scrolls=character.items.filter((item=>item!==null&&item!==undefined&&item.name==="scroll0"&&item.q!==undefined&&item.q>0));let q=0;for(const[,value]of Object.entries(scrolls)){q+=value.q?value.q:0}if(q<defaultSettingsProxy.minimumScrollsToUpgrade)return q;return false}async function buyScrolls(currentScrollQuantity){await teleportToTown();safe_log("Buying scrolls...");if(!smart.moving){await smart_move({x:customCharacters.Lucas.x,y:customCharacters.Lucas.y})}const pricePerScroll=G.items.scroll0.g;const goldNeeded=(defaultSettingsProxy.minimumScrollsToUpgrade-currentScrollQuantity)*pricePerScroll;if(character.gold<goldNeeded){safe_log(`Not enough gold to buy scrolls. Needed: ${goldNeeded}, Have: ${character.gold}`);defaultSettingsProxy.upgrade_mode=false}else{buy("scroll0",defaultSettingsProxy.minimumScrollsToUpgrade-currentScrollQuantity)}}async function walkToUpgradeNpc(){if(!smart.moving){await smart_move({x:customCharacters.Cue.x,y:customCharacters.Cue.y})}}async function upgradeItems(townTeleport=false){safe_log("Upgrading items");if(defaultSettingsProxy.allItemsUpgraded){safe_log(`Current allItemsUpgraded: ${defaultSettingsProxy.allItemsUpgraded}`);safe_log("All items upgraded, returning")}if(character.gold>defaultSettingsProxy.goldToStartUpgrading){defaultSettingsProxy.upgrade_mode=true;defaultSettingsProxy.attack_mode=false}if(character.gold<defaultSettingsProxy.minimumGoldToStopUpgrading){defaultSettingsProxy.upgrade_mode=false;defaultSettingsProxy.attack_mode=true}if(!defaultSettingsProxy.upgrade_mode)return;if(!chooseUpgradeItem()){defaultSettingsProxy.allItemsUpgraded=true;defaultSettingsProxy.upgrade_mode=false;return}await chooseUpgradeItem();if(townTeleport)await teleportToTown();const currentScrolls=await needScrolls();if(currentScrolls){await buyScrolls(currentScrolls)}if(!defaultSettingsProxy.upgrade_mode)return;if(character.gold<defaultSettingsProxy.minimumGoldToStopUpgrading){defaultSettingsProxy.upgrade_mode=false;defaultSettingsProxy.attack_mode=true;return}await walkToUpgradeNpc();await upgrade(locate_item(defaultSettingsProxy.upgradeItem.id),locate_item("scroll0").then((function(data){if(data.success)safe_log("Upgraded item successfully");else safe_log("Failed to upgrade item")})))}async function mainLoop(){createLocalStorage();await customHPandMP();loot();await checkHealthPotions();await upgradeItems(true);if(defaultSettingsProxy.attack_mode||character.rip||is_moving(character)||!smart.moving){await battleMonsters(defaultSettingsProxy.currentMonster)}setTimeout(mainLoop,1e3/4)}mainLoop()})();